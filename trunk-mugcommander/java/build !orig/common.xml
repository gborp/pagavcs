<!--
This file is part of muCommander, http://www.mucommander.com
Copyright (C) 2002-2010 Maxence Bernard

muCommander is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

muCommander is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<!-- ========================================================= -->
<!-- Properties and targets common to all muCommander          -->
<!-- subprojects.                                              -->
<!--                                                           -->
<!-- Author: Nicolas Rinaudo, Maxence Bernard                  -->
<!-- ========================================================= -->
<project>
  <!-- = Directory structure ================================= -->
  <!-- ======================================================= -->
  <!-- The following properties describe the global directory  -->
  <!-- structure.                                              -->

  <!-- Directory in which to store distribution files.         -->
  <property name="dist"                value="dist"/>
  <!-- Directory in which to store temporary files.            -->
  <property name="tmp"                 value="tmp"/>
  <!-- Directory in which to store reports.                    -->
  <property name="reports"             value="reports"/>
  <!-- Directory in which to store the documentation.          -->
  <property name="doc"                 location="docs"/>
  <!-- Directory from which to load resources.                 -->
  <property name="res"                 location="res"/>
  <!-- Directory in which to find report stylesheets.          -->
  <property name="reports-style"       location="${res}/reports"/>
  <!-- Directory from which to load the various tools used to  -->
  <!-- build the software.                                     -->
  <property name="tools"               location="tools"/>
  <!-- Directory containing the project's sources.             -->
  <property name="source"              location="source"/>
  <!-- Directory containing the project's libraries.           -->
  <property name="lib"                 location="lib"/>
  <!-- Defines a pattern that matches any non-test Java source -->
  <!-- file.                                                   -->
  <patternset id="non-test-sources">
    <include name="**/*.java"/>
    <exclude name="**/*Test.java"/>
  </patternset>



  <!-- = Ant Contrib management ============================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to load the Ant Contrib  -->
  <!-- tasks.                                                  -->

  <!-- Tries to load Ant Contrib.                              -->
  <!--                                                         -->
  <!-- If Ant Contrib couldn't be loaded, the build will fail. -->
  <target name="load-antcontrib">
    <!-- If the AntContrib path is not set, uses default       -->
    <!-- value.                                                -->
    <property name="antcontrib.lib" value="${tools}/ant-contrib.jar"/>

    <!-- Checks whether the necessary resources are available, -->
    <!-- fails otherwise.                                      -->
    <condition property="antcontrib.available" value="true">
      <available resource="net/sf/antcontrib/antlib.xml" classpath="${antcontrib.lib}"/>
    </condition>
    <fail unless="antcontrib.available">Ant Contrib not available.</fail>

    <!-- Loads the Ant Contrib tasks.                          -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${antcontrib.lib}"/>
  </target>



  <!-- = FindBugs management ================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to check whether         -->
  <!-- FindBugs is available and load it if so.                -->

  <!-- Checks whether FindBugs is available.                   -->
  <!--                                                         -->
  <!-- If FindBugs is available, ${findbugs.available} will be -->
  <!-- set to true.                                            -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file.               -->
  <target name="check-findbugs">
    <!-- Checks for FindBugs availability.                     -->
    <!-- If FindBugs is available, the ${findbugs.available}   -->
    <!-- property will be set to true.                         -->
    <condition property="findbugs.available" value="true">
      <available classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.home}/lib/findbugs-ant.jar"/>
    </condition>
  </target>  

  <!-- Tries to load FindBugs.                                 -->
  <!--                                                         -->
  <!-- If FindBugs is available, ${findbugs.available} will be -->
  <!-- set to true.                                            -->
  <target name="load-findbugs" depends="check-findbugs" if="findbugs.available">
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.home}/lib/findbugs-ant.jar"/>
  </target>



  <!-- = ProGuard management ================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to check whether         -->
  <!-- ProGuard is available and load it if so.                -->

  <!-- Checks whether ProGuard is available.                   -->
  <!--                                                         -->
  <!-- If ProGuard is available, ${proguard.available} will be -->
  <!-- set to true.                                            -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file.               -->
  <target name="check-proguard">
    <!-- If the ProGuard path is not set, uses default value.  -->
    <property name="proguard.lib" value="${tools}/proguard.jar"/>

    <!-- Checks for ProGuard availability.                     -->
    <!-- If ProGuard is available, the ${proguard.available}   -->
    <!-- property will be set to true.                         -->
    <condition property="proguard.available" value="true">
      <available classname="proguard.ant.ProGuardTask" classpath="${proguard.lib}"/>
    </condition>
  </target>  

  <!-- Tries to load ProGuard.                                 -->
  <!--                                                         -->
  <!-- If ProGuard is available, ${proguard.available} will be -->
  <!-- set to true.                                            -->
  <!--                                                         -->
  <!-- Additionally, this task will check whether ProGuard can -->
  <!-- use mixed-case class names. If it can,                  -->
  <!-- ${proguard.mixed-case} will be set to true.             -->
  <target name="load-proguard" depends="check-proguard,check-7za" if="proguard.available">
    <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard.lib}"/>

    <!-- Use mixed-case obfuscation if:                        -->
    <!-- - 7za is not available (the obfuscated JAR is not     -->
    <!--   extracted).                                         -->
    <!-- - configuration defines the file system as case       -->
    <!--   sensitive.                                          -->
    <!-- In other cases, classes would be lost in the          -->
    <!-- compression step if mixed-case obfuscation was used.  -->
    <condition property="proguard.mixed-case" value="true">
      <or>
        <isfalse value="${7za.available}"/>
        <istrue value="${case-sensitive-fs}"/>
      </or>
    </condition>
  </target>



  <!-- = JDepend management ================================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to check whether         -->
  <!-- JDepend is available.                                   -->
  <!--                                                         -->
  <!-- Ant comes bundled with an optional JDepend task, but    -->
  <!-- this requires the main JDepend package to run.          -->
  <!--                                                         -->
  <!-- Ant is a bit peculiar about configuring optional tasks  -->
  <!-- and won't let us do that at runtime, which forces users -->
  <!-- to copy ./tools/jdepend.jar in $ANT_HOME/lib.           -->

  <!-- Tries to load the JDepend Ant task.                     -->
  <!--                                                         -->
  <!-- If JDepend is available, ${jdepend.available} will be   -->
  <!-- set to true.                                            -->
  <target name="check-jdepend">
    <condition property="jdepend.available" value="true">
      <!-- Test both Ant task and one of JDepend package       -->
      <!-- framework classes.                                  -->
      <and>
        <available classname="org.apache.tools.ant.taskdefs.optional.jdepend.JDependTask"/>
        <available classname="jdepend.framework.JDepend"/>
      </and>
    </condition>
  </target>



  <!-- = JUnit management ==================================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to check whether         -->
  <!-- JUnit is available.                                     -->
  <!--                                                         -->
  <!-- Ant comes bundled with an optional JUnit task, but      -->
  <!-- this requires the main JUnit package to run.            -->
  <!--                                                         -->
  <!-- Ant is a bit peculiar about configuring optional tasks  -->
  <!-- and won't let us do that at runtime, which forces users -->
  <!-- to copy ./lib/noinclude/junit.jar in $ANT_HOME/lib.     -->

  <!-- Tries to load the JUnit Ant task.                       -->
  <!--                                                         -->
  <!-- If JUnit is available, ${junit.available} will be       -->
  <!-- set to true.                                            -->
  <!--                                                         -->
  <!-- If not in release mode (${is-release} set to false),    -->
  <!-- this target will fail the build.                        -->
  <target name="check-junit">
    <condition property="junit.available" value="true">
      <!-- Test both Ant task and one of JUnit package         -->
      <!-- framework classes.                                  -->
      <and>
        <available classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
        <available classname="junit.framework.Test"/>
      </and>
    </condition>

    <!-- If we're not in release mode and junit is not         -->
    <!-- available, fails the build.                           -->
    <fail>
      JUnit could not be loaded. Verify that ${ant.home}lib/ contains both 'ant-junit.jar' (JUnit Ant task) and 'junit.jar' (JUnit package). The 'junit.jar' package can be found in ${lib}/.
      <condition>
        <and>
          <not>
            <istrue value="${is-release}"/>
          </not>
          <not>
            <istrue value="${junit.available}"/>
          </not>
        </and>
      </condition>
    </fail>
  </target>



  <!-- = 7za management ====================================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to check whether 7za is  -->
  <!-- available.                                              -->

  <!-- Checks whether 7za is available.                        -->
  <!--                                                         -->
  <!-- If 7za is available, ${7za.available} will be set to    -->
  <!-- true.                                                   -->
  <target name="check-7za">
    <condition property="7za.available" value="true">
      <available file="${7za.executable}" type="file"/>
    </condition>
  </target>  



  <!-- = JavaNCSS management ================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to check whether         -->
  <!-- JavaNCSS is available and load it if so.                -->

  <!-- Checks whether JavaNCSS is available.                   -->
  <!--                                                         -->
  <!-- If JavaNCSS is available, ${javancss.available} will be -->
  <!-- set to true.                                            -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file.               -->
  <target name="check-javancss">
    <!-- If the value is not set, use built-in jar.            -->
    <property name="javancss.lib" value="${tools}/javancss.jar"/>

    <!-- Checks for JavaNCSS availability.                     -->
    <!-- If JavaNCSS is available, the ${javancss.available}   -->
    <!-- property will be set to true.                         -->
    <condition property="javancss.available" value="true">
      <available classname="javancss.JavancssAntTask" classpath="${javancss.lib}"/>
    </condition>
  </target>

  <!-- Tries to load JavaNCSS.                                 -->
  <!--                                                         -->
  <!-- If JavaNCSS is available, ${javancss.available} will be -->
  <!-- set to true.                                            -->
  <target name="load-javancss" depends="check-javancss" if="javancss.available">
    <taskdef name="javancss" classname="javancss.JavancssAntTask" classpath="${javancss.lib}"/>
  </target>



  <!-- = Simian management =================================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to check whether         -->
  <!-- Simian is available and load it if so.                  -->

  <!-- Checks whether Simian is available.                     -->
  <!--                                                         -->
  <!-- If Simian is available, ${simian.available} will be set -->
  <!-- to true.                                                -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file.               -->
  <target name="check-simian">
    <!-- If the value is not set, use built-in jar.            -->
    <property name="simian.lib" value="${tools}/simian.jar"/>

    <!-- Checks for Simian availability.                       -->
    <!-- If Simian is available, the ${simian.available}       -->
    <!-- property will be set to true.                         -->
    <condition property="simian.available" value="true">
      <available resource="simiantask.properties" classpath="${simian.lib}"/>
    </condition>
  </target>

  <!-- Tries to load Simian.                                   -->
  <!--                                                         -->
  <!-- If simian is available, ${simian.available} will be set -->
  <!-- to true.                                                -->
  <target name="load-simian" depends="check-simian" if="simian.available">
    <taskdef resource="simiantask.properties" classpath="${simian.lib}"/>
  </target>



  <!-- = Doccheck management ================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to check whether         -->
  <!-- Doccheck is available.                                  -->

  <!-- Checks whether DocCheck is available.                   -->
  <!--                                                         -->
  <!-- If Doccheck is available, ${doccheck.available} will be -->
  <!-- set to true.                                            -->
  <target name="check-doccheck">
    <!-- If the value is not set, use built-in jar.            -->
    <property name="doccheck.lib" value="${tools}/doccheck.jar"/>

    <!-- Checks for Doccheck availability.                     -->
    <!-- If Doccheck is available, the ${doccheck.available}   -->
    <!-- property will be set to true.                         -->
    <condition property="doccheck.available" value="true">
      <available classname="com.sun.tools.doclets.doccheck.DocCheck" classpath="${doccheck.lib}"/>
    </condition>
  </target>



  <!-- = Maintenance ========================================= -->
  <!-- ======================================================= -->
  <!-- Deletes any dynamically generated file, effectively     -->
  <!-- re-initialising the whole project.                      -->
  <target name="clean" unless="clean.done">
    <echo>Deleting temporary files...</echo>
    <property name="clean.done" value="true"/>
    <delete dir="${tmp}"/>
    <delete dir="${dist}"/>
    <delete dir="${doc}"/>
    <delete dir="${reports}"/>
    <echo>Deleting emacs backup files...</echo>
    <delete includeEmptyDirs="true">
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target>
</project>
