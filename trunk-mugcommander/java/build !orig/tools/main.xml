<!--
This file is part of muCommander, http://www.mucommander.com
Copyright (C) 2002-2010 Maxence Bernard

muCommander is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

muCommander is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<!-- ========================================================= -->
<!-- Declares Ant tools specific properties and targets.       -->
<!--                                                           -->
<!-- Author: Nicolas Rinaudo                                   -->
<!-- ========================================================= -->
<project>
  <!-- = Application constants =============================== -->
  <!-- ======================================================= -->
  <!-- The following properties describe the current version   -->
  <!-- of the muCommander Ant tools.                           -->

  <!-- Major version of the muCommander Ant tools.             -->
  <property name="tools.version"       value="1.0"/>
  <!-- Minor version of the muCommander Ant tools.             -->
  <property name="tools.subversion"    value=".0"/>

  <!-- Defines the sources that must be included at compile    -->
  <!-- time.                                                   -->
  <patternset id="tools.sources">
    <include name="com/mucommander/ant/**"/>
    <include name="com/mucommander/xml/**"/>
  </patternset>



  <!-- = Tasks loading ======================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to load the muCommander  -->
  <!-- Ant tasks.                                              -->
  <!--                                                         -->
  <!-- Referencing these targets might result in compiling the -->
  <!-- Ant tools, as they need to be in a JAR to be loaded.    -->

  <!-- Loads all available Ant tools.                          -->
  <target name="load-anttools" depends="tools-jar">
    <!-- Checks which Ant tools JAR file is available, either  -->
    <!-- the obfuscated or 'clear' one.                        -->
    <!-- If both are available, takes the most up-to-date one. -->
    <!-- This is necessary as some of the Ant tools are        -->
    <!-- required to generate the obfuscated JAR file, in      -->
    <!-- which case we'll load the 'clear' one.                -->
    <condition property="anttools.path" value="${tools.jar.cmp}">
      <and>
        <available file="${tools.jar.cmp}"/>
        <or>
          <not>
            <available file="${tools.jar.normal}"/>
          </not>
          <uptodate srcfile="${tools.jar.normal}" targetfile="${tools.jar.cmp}"/>
        </or>
      </and>
    </condition>
    <property name="anttools.path" value="${tools.jar.normal}"/>

    <!-- Loads the Ant tools as defined in their XML           -->
    <!-- description file.                                     -->
    <taskdef resource="com/mucommander/ant/antlib.xml" classpath="${anttools.path}"/>
  </target>

  <!-- Stores the path to the JDK classes in ${java.lib}.      -->
  <target name="load-libpath" depends="load-anttools">
    <libpath property="java.lib" library="rt.jar:classes.jar"/>
    <libpath property="jsse.lib" library="jsse.jar"/>
  </target>

  <!-- Stores the path to the Ant runtime libraries in         -->
  <!-- ${ant.lib}.                                             -->
  <target name="load-antlibpath">
    <property name="ant.lib" location="${ant.home}/lib/ant.jar"/>
  </target>



  <!-- = Compilation ========================================= -->
  <!-- ======================================================= -->
  <!-- The following tasks are used to compile the muCommander -->
  <!-- Ant tasks.                                              -->

  <!-- Forces the Ant tasks to be recompiled even if they're   -->
  <!-- found to be up to date.                                 -->
  <!--                                                         -->
  <!-- This target must be referenced before 'check-tools' is  -->
  <!-- called to have any effect.                              -->
  <!--                                                         -->
  <!-- Note that this task doesn't actually compile the tasks, -->
  <!-- but only makes sure that tools-compile will be executed -->
  <!-- if referenced.                                          -->
  <target name="tools-force-compile">
    <property name="tools.force-compile" value="true"/>
  </target>

  <!-- Checks whether the tools jar file is up to date.        -->
  <!--                                                         -->
  <!-- Output is stored in ${tools.up-to-date}.                -->
  <!--                                                         -->
  <!-- Note that if 'tools-force-compile' has been referenced, -->
  <!-- this target will be ignored and ${tools.up-to-date}     -->
  <!-- stay undefined.                                         -->
  <target name="check-tools" unless="tools.force-compile">
    <echo>Checking whether the Ant tools are up-to-date...</echo>
    <uptodate property="tools.up-to-date" targetfile="${tools.jar.cmp}">
      <srcfiles dir="${source}/com/mucommander/ant" includes="**/*.java"/>
      <srcfiles file="${tools.res}/antlib.xml"/>
    </uptodate>
  </target>

  <!-- Compiles the tools source code.                         -->
  <!--                                                         -->
  <!-- Compiled sources will be stored in                      -->
  <!-- ${tools.classes.normal}.                                -->
  <!--                                                         -->
  <!-- Note that if 'tools-force-compile' hasn't been          -->
  <!-- referenced and 'check-tools' sets ${tools.up-to-date}   -->
  <!-- to true, this task will be skipped.                     -->
  <target name="tools-compile" depends="check-tools" unless="tools.up-to-date">
    <echo>Compiling Ant tools...</echo>

    <!-- Makes sure the build is not affected by artefacts of  -->
    <!-- previous compilations.                                -->
    <delete dir="${tools.classes.normal}"/>
    <mkdir dir="${tools.classes.normal}"/>

    <!-- Compiles the Ant tasks sources.                       -->
    <javac destdir="${tools.classes.normal}" debug="on" deprecation="on"
           encoding="utf-8" source="1.5" target="1.5" srcdir="${source}">

      <!-- Includes all available libraries.                   -->
      <classpath>
         <fileset dir="${lib}/">
           <include name="*include/*.jar"/>
         </fileset>
      </classpath>

      <!-- Excludes all non-tools related sources.             -->
      <patternset refid="tools.sources"/>
    </javac>
  </target>

  <!-- Creates a JAR file containing the uncompressed,         -->
  <!-- unobfuscated tools bytecode.                            -->
  <!--                                                         -->
  <!-- The resulting JAR file will be stored in                -->
  <!-- ${tools.jar.normal}.                                    -->
  <!--                                                         -->
  <!-- Note that if 'tools-force-compile' hasn't been          -->
  <!-- referenced and 'check-tools' sets ${tools.up-to-date}   -->
  <!-- to true, this task will be skipped.                     -->
  <target name="tools-jar" depends="tools-compile" unless="tools.up-to-date">
    <echo>Creating Ant tools JAR file...</echo>
    <jar destfile="${tools.jar.normal}">
      <!-- Includes all non-test bytecode.                     -->
      <fileset dir="${tools.classes.normal}" excludes="**/*Test.class"/>

      <!-- Includes resources.                                 -->
      <fileset file="${tools.res}/JavaApplicationStub"/>
      <fileset file="${tools.license}"/>
      <zipfileset prefix="com/mucommander/ant" file="${tools.res}/antlib.xml"/>

      <!-- Generates the correct manifest.                     -->
      <manifest>
        <attribute name="Specification-Title"    value="muCommander Ant tasks"/>
        <attribute name="Specification-Vendor"   value="Maxence Bernard"/>
        <attribute name="Specification-Version"  value="${tools.version}"/>
        <attribute name="Implementation-Title"   value="muCommander Ant tasks"/>
        <attribute name="Implementation-Vendor"  value="Maxence Bernard"/>
        <attribute name="Implementation-Version" value="${tools.version}${tools.subversion}"/>
      </manifest>
    </jar>
  </target>



  <!-- = ProGuard ============================================ -->
  <!-- ======================================================= -->
  <!-- The following targets are used to obfuscate the         -->
  <!-- muCommander Ant tools when possible.                    -->

  <!-- Checks whether we need to copy the tools JAR file.      -->
  <!--                                                         -->
  <!-- Note that the sole reason for this target is that Ant's -->
  <!-- 'if' and 'unless' statements can only take one variable -->
  <!-- as a parameter. For this reason, we need to aggregate   -->
  <!-- ${tools.up-to-date} and ${proguard.available} in one    -->
  <!-- property.                                               -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file.               -->
  <target name="tools-check-copy-bytecode">
    <condition property="copy-tools-bytecode" value="true">
      <not>
        <or>
          <istrue value="${tools.up-to-date}"/>
          <istrue value="${proguard.available}"/>
        </or>
      </not>
    </condition>
  </target>

  <!-- Copies the uncompressed, unobfuscated tools JAR file    -->
  <!-- over the obfuscated one.                                -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when ProGuard isn't available.         -->
  <!--                                                         -->
  <!-- The resulting JAR file will be stored in                -->
  <!-- ${tools.jar.obf}.                                       -->
  <!--                                                         -->
  <!-- Note that if 'tools-force-compile' hasn't been          -->
  <!-- referenced and 'check-tools' sets ${tools.up-to-date}   -->
  <!-- to true, this task will be skipped.                     -->
  <target name="tools-copy-bytecode" depends="tools-check-copy-bytecode" if="copy-tools-bytecode">
    <echo>ProGuard unavailable, skipping obfuscation of Ant tools. See compile.txt for information on how to configure ProGuard.</echo>
    <copy file="${tools.jar.normal}" tofile="${tools.jar.obf}" overwrite="true"/>
  </target>

  <!-- Obfuscated the uncompressed, unobfuscated tools JAR     -->
  <!-- file.                                                   -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when ProGuard is available.            -->
  <!--                                                         -->
  <!-- The resulting JAR file will be stored in                -->
  <!-- ${tools.jar.obf}.                                       -->
  <!--                                                         -->
  <!-- Note that if 'tools-force-compile' hasn't been          -->
  <!-- referenced and 'check-tools' sets ${tools.up-to-date}   -->
  <!-- to true, this task will be skipped.                     -->
  <target name="tools-obfuscate-bytecode" depends="load-antlibpath,load-libpath" if="proguard.available" unless="tools.up-to-date">
    <echo>Creating Ant tools obfuscated JAR file...</echo>

    <!-- Creates the directory in which all ProGuard reports   -->
    <!-- will be generated.                                    -->
    <mkdir dir="${tools.proguard.reports}"/>

    <!-- Obfuscates the Ant tasks JAR file.                    -->
    <proguard overloadaggressively="false" usemixedcaseclassnames="${case-sensitive-fs}" ignorewarnings="true" optimize="true" shrink="true" obfuscate="true"
              printmapping="${tools.proguard.reports}/mapping.txt" printusage="${tools.proguard.reports}/usage.txt" printseeds="${tools.proguard.reports}/seeds.txt"
              allowaccessmodification="false" repackageclasses="" skipnonpubliclibraryclasses="false">
      <injar name="${tools.jar.normal}"/> 
      <outjar name="${tools.jar.obf}"/>
      <libraryjar name="${java.lib}"/>
      <libraryjar name="${ant.lib}"/>
      <libraryjar name="${lib}/noinclude" jarfilter="*.jar"/>

      <!-- Makes sure all methods used by Ant are left alone.  -->
      <keepattribute name="exceptions"/>
      <keep access="public">
        <method access="public" name="set*"/>
        <method access="public" name="create*"/>
        <method access="public" name="add**"/>
      </keep>
    </proguard>
  </target>

  <!-- Identifies the best available obfuscation policy and    -->
  <!-- obfuscates the tools JAR file.                          -->
  <!--                                                         -->
  <!-- The resulting JAR file will be stored in                -->
  <!-- ${tools.jar.obf}.                                       -->
  <!--                                                         -->
  <!-- Note that if 'tools-force-compile' hasn't been          -->
  <!-- referenced and 'check-tools' sets ${tools.up-to-date}   -->
  <!-- to true, this task will be skipped.                     -->
  <target name="tools-obfuscate" depends="tools-jar,load-proguard,tools-copy-bytecode,tools-obfuscate-bytecode"/>



  <!-- = 7za compression ===================================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to compress the          -->
  <!-- muCommander Ant tools when possible.                    -->

  <!-- Checks whether we need to compress the tools JAR file.  -->
  <!--                                                         -->
  <!-- Note that the sole reason for this target is that Ant's -->
  <!-- 'if' and 'unless' statements can only take one variable -->
  <!-- as a parameter. For this reason, we need to aggregate   -->
  <!-- ${tools.up-to-date} and ${7za.available} in one         -->
  <!-- property.                                               -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file.               -->
  <target name="tools-check-copy-obfuscated">
    <condition property="copy-obfuscated-tools" value="true">
      <not>
        <or>
          <istrue value="${tools.up-to-date}"/>
          <istrue value="${7za.available}"/>
        </or>
      </not>
    </condition>
  </target>

  <!-- Compress the obfuscated tools JAR file using 7za.       -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when 7za is available.                 -->
  <!--                                                         -->
  <!-- The resulting JAR file will be stored in                -->
  <!-- ${tools.jar.cmp}.                                       -->
  <!--                                                         -->
  <!-- Note that if 'tools-force-compile' hasn't been          -->
  <!-- referenced and 'check-tools' sets ${tools.up-to-date}   -->
  <!-- to true, this task will be skipped.                     -->
  <target name="tools-compress-obfuscated" if="7za.available" unless="tools.up-to-date">
    <echo>Compressing Ant tool...</echo>

    <!-- Makes sure the compressed files gets deleted before   -->
    <!-- being created again, as this can sometimes cause heap -->
    <!-- issues (no, I haven't been able to figure out why).   -->
    <delete file="${tools.jar.cmp}"/>
    <delete dir="${tools.classes.obf}"/>

    <!-- Extracts the content of the JAR file before           -->
    <!-- compressing it again.                                 -->
    <unjar src="${tools.jar.obf}" dest="${tools.classes.obf}"/>

    <!-- Compresses the Ant tools as far as 7za can take it.   -->
    <exec executable="${7za.executable}" dir="${tools.classes.obf}" failonerror="true">
      <arg value="a"/>
      <arg value="-tzip"/>
      <arg value="-mm=Deflate"/>
      <arg value="-mx9"/>
      <arg value="-mfb=258"/>
      <arg value="-mpass=15"/>
      <arg value="${tools.jar.cmp}"/>
      <arg value="*"/>
    </exec>
  </target>

  <!-- Compress the obfuscated tools JAR file using standard   -->
  <!-- zip compression.                                        -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when 7za isn't available.              -->
  <!--                                                         -->
  <!-- The resulting JAR file will be stored in                -->
  <!-- ${tools.jar.cmp}.                                       -->
  <!--                                                         -->
  <!-- Note that if 'tools-force-compile' hasn't been          -->
  <!-- referenced and 'check-tools' sets ${tools.up-to-date}   -->
  <!-- to true, this task will be skipped.                     -->
  <target name="tools-copy-obfuscated" depends="tools-check-copy-obfuscated" if="copy-obfuscated-tools">
    <echo>7za unavailable, using standard compression for Ant tools. See compile.txt for information on to configure 7za.</echo>
    <copy file="${tools.jar.obf}" tofile="${tools.jar.cmp}"/>
  </target>

  <!-- Identifies the best available compression policy and    -->
  <!-- compresses the tools JAR obfuscated file.               -->
  <!--                                                         -->
  <!-- The resulting JAR file will be stored in                -->
  <!-- ${tools.jar.cmp}.                                       -->
  <!--                                                         -->
  <!-- Note that if 'tools-force-compile' hasn't been          -->
  <!-- referenced and 'check-tools' sets ${tools.up-to-date}   -->
  <!-- to true, this task will be skipped.                     -->
  <target name="tools-compress" depends="check-7za,tools-obfuscate,tools-compress-obfuscated,tools-copy-obfuscated"/>



  <!-- = Reports ============================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate various      -->
  <!-- reports about the Ant tasks and the quality of their    -->
  <!-- code.                                                   -->

  <!-- Aggregation target that will cause all known reports to -->
  <!-- be generated.                                           -->
  <target name="tools-reports" depends="clean,tools-force-compile,tools-obfuscate,tools-unit-test,tools-findbugs,tools-simian,tools-javancss,tools-jdepend,tools-doccheck"/>



  <!-- = Doccheck ============================================ -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate Doccheck     -->
  <!-- reports.                                                -->
  <!--                                                         -->
  <!-- These reports are used to identify any issue there      -->
  <!-- might be with the Ant tasks' Javadoc.                   -->

  <!-- Generates the doccheck reports.                         -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when Doccheck is available.            -->
  <!--                                                         -->
  <!-- The resulting HTML files will be stored in              -->
  <!-- ${tools.doccheck.reports}.                              -->
  <target name="tools-do-doccheck" if="doccheck.available">
    <echo>Generating Ant tools Doccheck report...</echo>

    <!-- Creates the directory in which all Doccheck reports   -->
    <!-- will be generated.                                    -->
    <mkdir dir="${tools.doccheck.reports}"/>

    <!-- Runs Doccheck.                                        -->
    <javadoc destdir="${tools.doccheck.reports}" encoding="UTF-8" access="protected" docletpath="${doccheck.lib}" doclet="com.sun.tools.doclets.doccheck.DocCheck">

      <!-- Includes all necessary libraries.                   -->
      <classpath>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
        </fileset>
        <fileset file="${ant.lib}"/>
      </classpath>

      <!-- This is not ideal, as a packageset will not filter  -->
      <!-- out JUnit tests, but it's a necessary evil. Not     -->
      <!-- using a packageset will cause Doccheck to consider  -->
      <!-- that all classes belong to an '(anonymous)'         -->
      <!-- package.                                            -->
      <packageset dir="${source}" defaultexcludes="yes">
        <include name="com/mucommander/ant/**"/>
        <include name="com/mucommander/xml/**"/>
      </packageset>
    </javadoc>
  </target>

  <!-- Notifies the user that Doccheck is not available.       -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when Doccheck isn't available.         -->
  <target name="tools-skip-doccheck" unless="doccheck.available">
    <echo>Doccheck unavailable, skipping Ant tools Javadoc analysis. See compile.txt for information on how to configure Doccheck.</echo>
  </target>

  <!-- Generates Ant tasks Doccheck reports if available.      -->
  <!--                                                         -->
  <!-- If Doccheck is not available, displays a helpfull(?)    -->
  <!-- message.                                                -->
  <target name="tools-doccheck" depends="load-antlibpath,check-doccheck,tools-do-doccheck,tools-skip-doccheck"/>



  <!-- = JDepend ============================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate JDepend      -->
  <!-- reports.                                                -->
  <!--                                                         -->
  <!-- These reports are used to identify issues with the      -->
  <!-- design of the Ant tasks - cycic dependencies, tight     -->
  <!-- coupling...                                             -->

  <!-- Generates the JDepend reports.                          -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when JDepend is available.             -->
  <!--                                                         -->
  <!-- The resulting XML and HTML files will be stored in      -->
  <!-- ${tools.jdepend.reports}.                               -->
  <target name="tools-do-jdepend" if="jdepend.available">
    <echo>Generating Ant tools JDepend report...</echo>

    <!-- Creates the directory in which all JDepend reports    -->
    <!-- will be generated.                                    -->
    <mkdir dir="${tools.jdepend.reports}"/>

    <!-- Generates the JDepend XML reports.                    -->
    <jdepend outputfile="${tools.jdepend.reports}/jdepend.xml" format="xml">

      <!-- Excludes all non-muCommander classes.               -->
      <exclude name="java.*"/>
      <exclude name="javax.*"/>
      <exclude name="junit.*"/>
      <exclude name="org.*"/>

      <!-- Includes all relevant muCommander classes.          -->
      <classespath>
        <dirset dir="${tools.classes.normal}">
          <include name="com/mucommander/ant"/>
          <include name="com/mucommander/xml"/>
        </dirset>
      </classespath>
    </jdepend>

    <!-- Generates a human readable HTML JDepend report.       -->
    <echo>Formatting Ant tools JDepend report...</echo>
    <xslt basedir="${tools.jdepend.reports}" destdir="${tools.jdepend.reports}" extension=".html" style="${ant.home}/etc/jdepend.xsl" />
  </target>

  <!-- Notifies the user that JDepend is not available.        -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when JDepend isn't available.          -->
  <target name="tools-skip-jdepend" unless="jdepend.available">
    <echo>JDepend not available, skipping Ant tools dependency analysis. See compile.txt for information on how to configure JDepend.</echo>
  </target>

  <!-- Generates Ant tasks JDepend reports if available.       -->
  <!--                                                         -->
  <!-- If JDepend is not available, displays a helpfull(?)     -->
  <!-- message.                                                -->
  <target name="tools-jdepend" depends="clean,tools-force-compile,tools-compile,check-jdepend,tools-do-jdepend,tools-skip-jdepend"/>



  <!-- = JavaNCSS ============================================ -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate JavaNCSS     -->
  <!-- reports.                                                -->
  <!--                                                         -->
  <!-- These reports contains various statistics about the Ant -->
  <!-- tasks - number of lines per class per package, ...      -->

  <!-- Generates the JavaNCSS reports.                         -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when JavaNCSS is available.            -->
  <!--                                                         -->
  <!-- The resulting XML and HTML files will be stored in      -->
  <!-- ${tools.javancss.reports}.                              -->
  <target name="tools-do-javancss" if="javancss.available">
    <echo>Generating the Ant tools JavaNCSS report...</echo>

    <!-- Creates the directory in which all JavaNCSS reports   -->
    <!-- will be stored.                                       -->
    <mkdir dir="${tools.javancss.reports}"/>

    <!-- Generates the JavaNCSS XML reports.                   -->
    <javancss generatereport="true" srcdir="${source}" abortOnFail="false" includes="com/mucommander/ant/**/*.java,com/mucommander/xml/*.java"
              outputfile="${tools.javancss.reports}/javancss.xml" format="xml"/>

    <!-- Formats the XML into human readable HTML reports.     -->
    <echo>Formatting the Ant tools JavaNCSS report...</echo>
    <xslt basedir="${tools.javancss.reports}" destdir="${tools.javancss.reports}" extension=".html" style="${reports-style}/javancss.xsl"/>
  </target>

  <!-- Notifies the user that JavaNCSS is not available.       -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when JavaNCSS isn't available.         -->
  <target name="tools-skip-javancss" unless="javancss.available">
    <echo>JavaNCSS not available, skipping the Ant tools NCSS report. See compile.txt for information on how to configure JavaNCSS.</echo>
  </target>

  <!-- Generates Ant tasks JavaNCSS reports if available.      -->
  <!--                                                         -->
  <!-- If JavaNCSS is not available, displays a helpfull(?)    -->
  <!-- message.                                                -->
  <target name="tools-javancss" depends="load-javancss,tools-skip-javancss,tools-do-javancss"/>



  <!-- = Simian ============================================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate Simian       -->
  <!-- reports.                                                -->
  <!--                                                         -->
  <!-- These reports are used to identify duplicated code      -->
  <!-- within the Ant tasks.                                   -->

  <!-- Generates the Simian reports.                           -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when Simian is available.              -->
  <!--                                                         -->
  <!-- The resulting XML and HTML files will be stored in      -->
  <!-- ${tools.simian.reports}.                                -->
  <target name="tools-do-simian" depends="load-simian" if="simian.available">
    <echo>Generating Ant tools Simian report...</echo>

    <!-- Creates the directory in which the Simian XML reports -->
    <!-- will be stored.                                       -->
    <mkdir dir="${tools.simian.reports}"/>

    <!-- Generates the Simian XML reports.                     -->
    <simian>
      <fileset dir="${source}">
        <patternset refid="tools.sources"/>
      </fileset>
      <formatter type="xml" toFile="${tools.simian.reports}/simian.xml"/>
    </simian>

    <!-- Generates human readable HTML versions of the         -->
    <!-- reports.                                              -->
    <echo>Formatting Ant tools Simian report...</echo>
    <xslt basedir="${tools.simian.reports}" destdir="${tools.simian.reports}" extension=".html" style="${reports-style}/simian.xsl"/>
  </target>

  <!-- Notifies the user that Simian is not available.         -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when Simian isn't available.           -->
  <target name="tools-skip-simian" unless="simian.available">
    <echo>Simian not available, skipping Ant tools similarity report. See compile.txt for information on how to configure Simian.</echo>
  </target>

  <!-- Generates Ant tasks Simian reports if available.        -->
  <!--                                                         -->
  <!-- If Simian is not available, displays a helpfull(?)      -->
  <!-- message.                                                -->
  <target name="tools-simian" depends="check-simian,tools-skip-simian,tools-do-simian"/>



  <!-- = Findbugs ============================================ -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate FindBugs     -->
  <!-- reports.                                                -->
  <!--                                                         -->
  <!-- These reports are used to identify potential bugs or    -->
  <!-- bad practice within the Ant tools code.                 -->

  <!-- Generates the FindBugs reports.                         -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when FindBugs is available.            -->
  <!--                                                         -->
  <!-- The resulting XML and HTML files will be stored in      -->
  <!-- ${tools.findbugs.reports}.                              -->
  <target name="tools-do-findbugs" depends="load-antlibpath,tools-jar" if="findbugs.available">
    <echo>Generating Ant tools FindBugs report...</echo>

    <!-- Creates the directory in which to store all Findbugs  -->
    <!-- reports.                                              -->
    <mkdir dir="${tools.findbugs.reports}"/>

    <!-- Creates the FindBugs filter file.                     -->
    <!-- FindBugs doesn't accept these as arguments to the     -->
    <!-- task, which is why we have to go through a temporary  -->
    <!-- file.                                                 -->
    <mkdir dir="${tools.tmp}"/>
    <echo file="${tools.tmp}/findbugs-filter.xml">
&lt;FindBugsFilter&gt;
  &lt;Match&gt;
    &lt;Package name="~com\.mucommander.*" /&gt;
  &lt;/Match&gt;
&lt;/FindBugsFilter&gt;
    </echo>

    <!-- Generates the FindBugs reports.                       -->
    <findbugs home="${findbugs.home}" output="xml" outputFile="${tools.findbugs.reports}/findbugs.xml" jvmargs="-Xmx128m" effort="max"
              includefilter="${tools.tmp}/findbugs-filter.xml">
      <sourcePath path="${source}" />
      <class location="${tools.jar.normal}"/>
      <auxclasspath>
        <fileset file="${ant.lib}"/>
        <fileset dir="${lib}/noinclude">
          <include name="**/*.jar"/>
        </fileset>
      </auxclasspath>
    </findbugs>

    <!-- Generates humand readable HTML versions of the        -->
    <!-- reports.                                              -->
    <echo>Formatting Ant tools FindBugs report...</echo>
    <xslt basedir="${tools.findbugs.reports}" destdir="${tools.findbugs.reports}" extension=".html" style="${reports-style}/findbugs.xsl"/>
  </target>

  <!-- Notifies the user that FindBugs is not available.       -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when FindBugs isn't available.         -->
  <target name="tools-skip-findbugs" unless="findbugs.available">
    <echo>FindBugs not available, skipping the Ant tools bug report. See compile.txt for information on how to configure FindBugs.</echo>
  </target>

  <!-- Generates Ant tasks FindBugs reports if available.      -->
  <!--                                                         -->
  <!-- If FindBugs is not available, displays a helpfull(?)    -->
  <!-- message.                                                -->
  <target name="tools-findbugs" depends="load-findbugs,tools-skip-findbugs,tools-do-findbugs"/>



  <!-- = JUnit =============================================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate JUnit        -->
  <!-- reports.                                                -->
  <!--                                                         -->
  <!-- These reports are used to identify regressions in the   -->
  <!-- Ant tasks' codebase.                                    -->

  <!-- Checks whether we need to run JUnit.                    -->
  <!--                                                         -->
  <!-- Note that the sole reason for this target is that Ant's -->
  <!-- 'if' and 'unless' statements can only take one variable -->
  <!-- as a parameter. For this reason, we need to aggregate   -->
  <!-- ${tools.up-to-date} and ${junit.available} in one       -->
  <!-- property.                                               -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file.               -->
  <target name="tools-check-skip-unit-test">
    <condition property="skip-unit-test-tools" value="true">
      <not>
        <or>
          <istrue value="${tools.up-to-date}"/>
          <istrue value="${junit.available}"/>
        </or>
      </not>
    </condition>
  </target>

  <!-- Generates the JUnit reports.                            -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when FindBugs is available.            -->
  <!--                                                         -->
  <!-- The resulting text, XML and HTML files will be stored   -->
  <!-- in ${tools.junit.reports}.                              -->
  <!--                                                         -->
  <!-- Note that if 'tools-force-compile' hasn't been          -->
  <!-- referenced and 'check-tools' sets ${tools.up-to-date}   -->
  <!-- to true, this task will be skipped.                     -->
  <target name="tools-do-unit-test" if="junit.available" unless="tools.up-to-date">
    <echo>Running Ant tools test cases...</echo>

    <!-- Prepares output directories.                          -->
    <mkdir dir="${tools.junit.reports}/raw"/>
    <mkdir dir="${tools.junit.reports}/html"/>

    <!-- Runs unit tests.                                      -->
    <!-- We want both plain and XML output: plain files are    -->
    <!-- easier to read, but XML ones can be integrated with   -->
    <!-- other tools.                                          -->
    <junit printsummary="yes" haltonfailure="yes">
      <formatter type="plain"/>
      <formatter type="xml"/>

      <!-- Includes all necessary libraries.                   -->
      <classpath>
        <pathelement location="${tools.classes.normal}"/>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>

      <!-- Runs all tests.                                     -->
      <batchtest fork="yes" todir="${tools.junit.reports}/raw">
        <fileset dir="${tools.classes.normal}">
          <include name="**/*Test.class"/>
        </fileset>
      </batchtest>
    </junit>

    <!-- Formats the XML reports into humand readable HTML.    -->
    <echo>Formatting Ant tools test reports...</echo>
    <junitreport todir="${tools.junit.reports}/raw">
      <fileset dir="${tools.junit.reports}/raw">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${tools.junit.reports}/html"/>
    </junitreport>
  </target>

  <!-- Notifies the user that JUnit is not available.          -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when JUnit isn't available.            -->
  <target name="tools-skip-unit-test" depends="tools-check-skip-unit-test" if="skip-unit-test-tools">
    <echo>JUnit not available, skipping Ant tools test cases. See compile.txt for information on how to configure JUnit.</echo>
  </target>

  <!-- Generates Ant tasks JUnit reports if available.         -->
  <!--                                                         -->
  <!-- If Junit is not available, displays a helpfull(?)       -->
  <!-- message.                                                -->
  <target name="tools-unit-test" depends="tools-jar,check-junit,tools-skip-unit-test,tools-do-unit-test"/>



  <!-- = Ant tools documentation ============================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate the          -->
  <!-- muCommander Ant tools documentation.                    -->

  <!-- Checks whether AntDoclet is available.                  -->
  <!--                                                         -->
  <!-- If it is, ${antdoclet.available} will be set to true.   -->
  <!--                                                         -->
  <!-- Otherwise:                                              -->
  <!-- - If we're in release mode (${is-release} set to true}, -->
  <!--   ${antdoclet.available} will be set to false.          -->
  <!-- - If we're not in release mode, the build will fail.    -->
  <target name="check-antdoclet" depends="load-antlibpath">
    <!-- If AntDoclet or Velocity haven't been configured      -->
    <!-- properly, use default values.                         -->
    <property name="antdoclet.lib" location="${tools}/antdoclet.jar"/>
    <property name="velocity.lib"  location="${tools}/velocity.jar"/>

    <!-- Checks whether AntDoclet is available.                -->
    <condition property="antdoclet.available" value="true">
      <available classname="com.neuroning.antdoclet.AntDoclet" classpath="${ant.lib}:${antdoclet.lib}:${velocity.lib}"/>
    </condition>

    <!-- If AntDoclet is not available and we're not in        -->
    <!-- release mode, we must fail the build here.            -->
    <fail message="AntDoclet not configured. See compile.txt for information on how to configure AntDoclet.">
      <condition>
        <and>
          <not>
            <istrue value="${is-release}"/>
          </not>
          <not>
            <istrue value="${antdoclet.available}"/>
          </not>
        </and>
      </condition>
    </fail>
  </target>

  <!-- Generates the Ant Tools documentation.                  -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when AntDoclet is available.           -->
  <!--                                                         -->
  <!-- Output will be stored in ${tools.doc}.                  -->
  <target name="tools-make-doc" depends="tools-compress" if="antdoclet.available">
    <echo>Creating Ant tools documentation...</echo>

    <!-- Prepares the output directory.                        -->
    <mkdir dir="${tools.doc}"/>
    <copy todir="${tools.doc}" overwrite="true">
      <fileset dir="${tools.template}/">
	<exclude name="*.vm"/>
      </fileset>
    </copy>

    <!-- Runs AntDoclet on the Ant tasks sources.              -->
    <javadoc access="public" packagenames="com.mucommander.ant.*" 
             destdir="${tools.doc}" encoding="UTF-8" docletpath="${ant.lib}:${antdoclet.lib}:${velocity.lib}:${tools.jar.cmp}">

      <!-- Excludes all non test sources.                      -->
      <fileset dir="${source}/com/mucommander/ant">
        <patternset refid="non-test-sources"/>
      </fileset>
      <fileset dir="${source}/com/mucommander/xml">
        <patternset refid="non-test-sources"/>
      </fileset>

      <doclet name="com.neuroning.antdoclet.AntDoclet">
	<param name="-doctitle" value="muCommander Ant Tools" />
	<param name="-templatesdir" value="${tools.template}"/>
	<param name="-templates" value="${tools.doc-template}" />
      </doclet>
    </javadoc>
  </target>

  <!-- Notifies the user that AntDoclet is not available.      -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when AntDoclet isn't available.        -->
  <target name="tools-skip-doc" unless="antdoclet.available">
    <echo>AntDoclet not available, skipping Ant tools documentation. See compile.txt for information on how to configure AntDoclet.</echo>
  </target>

  <!-- Generates the Ant tasks documentation if possible.      -->
  <!--                                                         -->
  <!-- If AntDoclet is not available, displays a helpfull(?)   -->
  <!-- message or fails, depending on the context.             -->
  <target name="tools-doc" depends="check-antdoclet,tools-make-doc,tools-skip-doc"/>

  <!-- Packages the tool documentation.                        -->
  <!--                                                         -->
  <!-- Output is stored in                                     -->
  <!-- ${dist}/${tools.package-prefix}-docs.tar.gz              -->
  <target name="tools-doc-tgz" depends="tools-doc,tools-prefixes" if="antdoclet.available">
    <echo>Packaging Ant tools documentation...</echo>
    <mkdir dir="${dist}"/>
    <tar destfile="${dist}/${tools.package-prefix}-docs.tar.gz" compression="gzip">
      <tarfileset dir="${tools.doc}" prefix="${tools.archive-prefix}"/>
    </tar>
  </target>



  <!-- = Ant tools release =================================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate a release    -->
  <!-- of the muCommander Ant tools.                           -->

  <!-- Stores the tools package and archive prefixes in        -->
  <!-- ${tools.package-prefix} and ${tools.archive-prefix}.    -->
  <!--                                                         -->
  <!-- The archive prefix is meant to be used as the name of   -->
  <!-- the root directory in the tools tar.gz release file.    -->
  <!--                                                         -->
  <!-- The package prefix is meant to be used as the name of   -->
  <!-- the tar.gz release file.                                -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file.               -->
  <target name="tools-prefixes" depends="load-antcontrib">
    <echo>Creating Ant tools archive prefix...</echo>
    <propertyregex property="tools.archive-prefix" input="muCommander-ant-tools-${tools.version}${tools.subversion}" regexp="[ .]" replace="_"/>
    <echo>Creating Ant tools package name prefix...</echo>
    <propertyregex property="tools.package-prefix" input="mucommander-ant-tools-${tools.version}${tools.subversion}" regexp="[ .]" replace="_"/>
  </target>


  <!-- Generates the Ant Tools release file.                   -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file.               -->
  <!--                                                         -->
  <!-- Output will be stored in                                -->
  <!-- ${dist}/${tools.package-prefix}.tar.gz                  -->
  <target name="tools-make-release" depends="tools-compress,tools-prefixes" if="antdoclet.available">
    <!-- Refreshes the release directory structure.            -->
    <delete dir="${tools.tmp}/release"/>
    <mkdir dir="${tools.tmp}/release/lib"/>
    <mkdir dir="${tools.tmp}/release/lib/noinclude"/>
    <mkdir dir="${tools.tmp}/release/docs"/>
    <mkdir dir="${tools.tmp}/release/source"/>
    <mkdir dir="${tools.tmp}/release/tools"/>
    <mkdir dir="${tools.tmp}/release/res/"/>

    <!-- Adds the license, readme and compile files.           -->
    <copy file="${tools.license}" todir="${tools.tmp}/release"/>
    <copy file="${tools.readme}"  todir="${tools.tmp}/release"/>
    <copy file="${tools.compile}" todir="${tools.tmp}/release"/>

    <!-- Adds the compressed JAR file.                         -->
    <copy file="${tools.jar.cmp}" todir="${tools.tmp}/release/lib"/>

    <!-- Adds the JUnit JAR file.                              -->
    <copy file="${lib}/noinclude/junit.jar" todir="${tools.tmp}/release/lib/noinclude"/>

    <!-- Adds the resources.                                   -->
    <copy todir="${tools.tmp}/release/res">
      <fileset dir="${tools.res}">
        <exclude name="**/*.txt"/>
      </fileset>
    </copy>
    <copy todir="${tools.tmp}/release/res/reports">
      <fileset dir="${reports-style}"/>
    </copy>

    <!-- Adds the build files.                                 -->
    <copy file="${tools.build}" tofile="${tools.tmp}/release/build.xml"/>
    <copy todir="${tools.tmp}/release/build">
      <fileset dir="build">
        <include name="common.xml"/>
        <include name="local_template.xml"/>
        <include name="tools/structure.xml"/>
        <include name="tools/main.xml"/>
      </fileset>
    </copy>

    <!-- Adds various necessary tools.                         -->
    <copy todir="${tools.tmp}/release/tools">
      <fileset dir="${tools}/">
        <include name="antdoclet.jar"/>
        <include name="velocity.jar"/>
        <include name="proguard.jar"/>
        <include name="simian.jar"/>
        <include name="javancss.jar"/>
        <include name="jdepend.jar"/>
        <include name="doccheck.jar"/>
        <include name="ant-contrib.jar"/>
      </fileset>
    </copy>

    <!-- Adds the sources.                                     -->
    <copy todir="${tools.tmp}/release/source">
      <fileset dir="${source}/">
        <patternset refid="tools.sources"/>
      </fileset>
    </copy>

    <!-- Adds the documentation.                               -->
    <copy todir="${tools.tmp}/release/docs">
      <fileset dir="${tools.doc}/"/>
    </copy>

    <!-- Creates the the release file.                         -->
    <echo>Packaging Ant tools distribution file...</echo>
    <mkdir dir="${dist}"/>
    <tar destfile="${dist}/${tools.package-prefix}.tar.gz" compression="gzip">
      <tarfileset dir="${tools.tmp}/release/" prefix="${tools.archive-prefix}">
        <include name="**"/>
      </tarfileset>
    </tar>
  </target>

  <!-- Notifies the user that the release file couldn't be     -->
  <!-- generated as AntDoclet is not available.                -->
  <!--                                                         -->
  <!-- This is a 'private' target and should never be          -->
  <!-- referenced directly outside of this file. It's only     -->
  <!-- meant to be used when AntDoclet isn't available.        -->
  <target name="tools-skip-release" unless="antdoclet.available">
    <echo>AntDoclet not available, skipping Ant tools release. See compile.txt for information on how to configure AntDoclet.</echo>
  </target>

  <!-- Generates a release package for the muCommander tasks.  -->
  <!--                                                         -->
  <!-- Note that this task will fail is AntDoclet is not       -->
  <!-- available.                                              -->
  <!--                                                         -->
  <!-- The output will be stored in                            -->
  <!-- ${dist}/${tools.package-prefix}.tar.gz                  -->
  <target name="tools-release" depends="tools-force-compile,clean,tools-unit-test,tools-doc-tgz,tools-make-release,tools-skip-release"/>
</project>
